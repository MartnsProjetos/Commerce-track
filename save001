<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Sistema de Estoque</title>
    
</head>
<body>
<CENTER><div class="container">
        <h2>Cadastrar Produto</h2>
        <input type="text" id="nome" placeholder="Nome">
        <input type="text" id="tipo" placeholder="Tipo">
        <input type="number" id="custo" placeholder="Custo">
        <input type="number" id="venda" placeholder="Venda">
        <input type="number" id="quantidade" placeholder="Quantidade">
        <button onclick="salvarProduto()">Salvar Produto</button>

        <h2>Produtos Adicionados</h2>
        <input type="text" id="pesquisa" placeholder="Buscar produto..." oninput="filtrarProdutos()">
        <table id="tabela-produtos">
            <tr>
                <th>Nome</th>
                <th>Tipo</th>
                <th>Custo</th>
                <th>Venda</th>
                <th>Quant</th>
                <th>Ação</th>
            </tr>
        </table></CENTER>

<center><h2>Realizar Venda</h2>
        <input type="text" id="buscarProduto" placeholder="Buscar produto..." oninput="filtrarProdutosVenda()">
        <button onclick="adicionarAoCarrinho()">Adicionar</button>
        <p id="carrinho"></p>
        <p>Total: R$ <span id="total">0</span></p></center>
      <center> <button onclick="finalizarCompra()">Finalizar Compra</button> </center>
      <center>
        <button onclick="limparCarrinho()">Limpar Carrinho</button>
    </center>
    
        <div id="confirmacao" class="confirmacao-venda">Venda realizada com sucesso!</div>

        <div class="box">
            <h2>Vendas Realizadas</h2>
            <table class="vendas-lista">
                <thead>
                    <tr>
                        <th>Produto</th>
                        <th>Quantidade</th>
                        <th>Total</th>
                        <th>Data e Hora</th>
                    </tr>
                </thead>
                <tbody id="vendas-lista"></tbody>
            </table>
            <p>Total de lucro: R$ <span id="totalLucro">0</span></p>
            <p>Total de produtos vendidos: <span id="totalProdutosVendidos">0</span></p>
        </div>

        <a href="Fechar_caixa.html"><center><button onclick="fecharCaixa()">Terminar Caixa</button></center></a>
    </div>

    <script>
       // Variáveis globais
let produtos = JSON.parse(localStorage.getItem('produtos')) || [];
let carrinho = [];
let total = 0;
let ultimaPesquisa = '';

// Inicialização
window.onload = function() {
    atualizarTabela();
    carregarVendasSalvas();
};

// Função para salvar produto com validação
function salvarProduto() {
    let nome = document.getElementById("nome").value.trim();
    let tipo = document.getElementById("tipo").value.trim();
    let custo = parseFloat(document.getElementById("custo").value);
    let venda = parseFloat(document.getElementById("venda").value);
    let quantidade = parseInt(document.getElementById("quantidade").value);
    
    // Validação básica
    if (!nome || !tipo || isNaN(custo) || isNaN(venda) || isNaN(quantidade)) {
        mostrarMensagem("Preencha todos os campos corretamente", "erro");
        return;
    }
    
    if (custo <= 0 || venda <= 0 || quantidade < 0) {
        mostrarMensagem("Valores de custo e venda devem ser maiores que zero", "erro");
        return;
    }
    
    // Verificar se produto já existe
    const produtoExistente = produtos.findIndex(p => p.nome.toLowerCase() === nome.toLowerCase());
    
    if (produtoExistente >= 0) {
        // Perguntar se deseja atualizar o estoque
        if (confirm(`O produto "${nome}" já existe. Deseja adicionar ${quantidade} unidades ao estoque atual?`)) {
            produtos[produtoExistente].quantidade += quantidade;
            mostrarMensagem(`Estoque de "${nome}" atualizado com sucesso!`, "sucesso");
        } else {
            return;
        }
    } else {
        // Adicionar novo produto
        let produto = { nome, tipo, custo, venda, quantidade };
        produtos.push(produto);
        mostrarMensagem(`Produto "${nome}" adicionado com sucesso!`, "sucesso");
    }
    
    // Salvar e limpar campos
    localStorage.setItem('produtos', JSON.stringify(produtos));
    limparCamposCadastro();
    atualizarTabela();
}

// Limpar campos de cadastro
function limparCamposCadastro() {
    document.getElementById("nome").value = "";
    document.getElementById("tipo").value = "";
    document.getElementById("custo").value = "";
    document.getElementById("venda").value = "";
    document.getElementById("quantidade").value = "";
    document.getElementById("nome").focus();
}

// Atualizar tabela com animação
function atualizarTabela() {
    let tabela = document.getElementById("tabela-produtos");
    tabela.innerHTML = "<tr><th>Nome</th><th>Tipo</th><th>Custo</th><th>Venda</th><th>Quant</th><th>Ação</th></tr>";
    
    if (produtos.length === 0) {
        let row = tabela.insertRow();
        let cell = row.insertCell(0);
        cell.colSpan = 6;
        cell.innerHTML = "Nenhum produto cadastrado";
        cell.style.textAlign = "center";
        cell.style.padding = "20px";
        return;
    }
    
    produtos.forEach((produto, index) => {
        let row = tabela.insertRow();
        row.setAttribute("data-index", index);
        
        // Adicionar classe para animação de entrada
        row.classList.add("fade-in");
        
        row.insertCell(0).innerText = produto.nome;
        row.insertCell(1).innerText = produto.tipo;
        row.insertCell(2).innerHTML = `<input type='number' value='${produto.custo}' min='0' step='0.01' onchange='editarProduto(${index}, "custo", this.value)'>`;
        row.insertCell(3).innerHTML = `<input type='number' value='${produto.venda}' min='0' step='0.01' onchange='editarProduto(${index}, "venda", this.value)'>`;
        row.insertCell(4).innerHTML = `<input type='number' value='${produto.quantidade}' min='0' onchange='editarProduto(${index}, "quantidade", this.value)'>`;
        
        let cellAcao = row.insertCell(5);
        cellAcao.innerHTML = `
            <button class="btn-excluir" onclick='excluirProduto(${index})'>Excluir</button>
            <button class="btn-editar" onclick='editarProdutoCompleto(${index})'>Editar</button>
        `;
        
        // Remover a classe após a animação
        setTimeout(() => {
            row.classList.remove("fade-in");
        }, 500);
    });
    
    // Reaplicar filtro se houver pesquisa ativa
    if (ultimaPesquisa) {
        filtrarProdutos();
    }
}

// Editar produto (campo específico)
function editarProduto(index, campo, valor) {
    const valorNum = parseFloat(valor);
    
    if (isNaN(valorNum) || valorNum < 0) {
        mostrarMensagem("Por favor, insira um valor válido", "erro");
        atualizarTabela(); // Restaurar valor anterior
        return;
    }
    
    produtos[index][campo] = valorNum;
    localStorage.setItem('produtos', JSON.stringify(produtos));
    
    // Feedback visual
    const row = document.querySelector(`tr[data-index="${index}"]`);
    if (row) {
        row.classList.add("highlight");
        setTimeout(() => row.classList.remove("highlight"), 1000);
    }
}

// Editar produto completo (abre formulário de edição)
function editarProdutoCompleto(index) {
    const produto = produtos[index];
    
    document.getElementById("nome").value = produto.nome;
    document.getElementById("tipo").value = produto.tipo;
    document.getElementById("custo").value = produto.custo;
    document.getElementById("venda").value = produto.venda;
    document.getElementById("quantidade").value = produto.quantidade;
    
    // Rolar para o topo e focar no nome
    window.scrollTo({top: 0, behavior: 'smooth'});
    
    // Mudar o botão de salvar para atualizar
    const btnSalvar = document.querySelector('button');
    btnSalvar.textContent = 'Atualizar Produto';
    btnSalvar.onclick = function() {
        atualizarProdutoExistente(index);
    };
    
    // Adicionar botão para cancelar edição
    const btnCancelar = document.createElement('button');
    btnCancelar.textContent = 'Cancelar';
    btnCancelar.classList.add('btn-cancelar');
    btnCancelar.onclick = function() {
        limparCamposCadastro();
        this.remove();
        btnSalvar.textContent = 'Salvar Produto';
        btnSalvar.onclick = salvarProduto;
    };
    
    btnSalvar.parentNode.insertBefore(btnCancelar, btnSalvar.nextSibling);
}

// Atualizar produto existente
function atualizarProdutoExistente(index) {
    let nome = document.getElementById("nome").value.trim();
    let tipo = document.getElementById("tipo").value.trim();
    let custo = parseFloat(document.getElementById("custo").value);
    let venda = parseFloat(document.getElementById("venda").value);
    let quantidade = parseInt(document.getElementById("quantidade").value);
    
    // Validação básica
    if (!nome || !tipo || isNaN(custo) || isNaN(venda) || isNaN(quantidade)) {
        mostrarMensagem("Preencha todos os campos corretamente", "erro");
        return;
    }
    
    if (custo <= 0 || venda <= 0 || quantidade < 0) {
        mostrarMensagem("Valores de custo e venda devem ser maiores que zero", "erro");
        return;
    }
    
    produtos[index] = { nome, tipo, custo, venda, quantidade };
    localStorage.setItem('produtos', JSON.stringify(produtos));
    
    // Restaurar o botão de salvar
    const btnSalvar = document.querySelector('button');
    btnSalvar.textContent = 'Salvar Produto';
    btnSalvar.onclick = salvarProduto;
    
    // Remover botão de cancelar
    const btnCancelar = document.querySelector('.btn-cancelar');
    if (btnCancelar) btnCancelar.remove();
    
    limparCamposCadastro();
    atualizarTabela();
    mostrarMensagem(`Produto "${nome}" atualizado com sucesso!`, "sucesso");
}

// Excluir produto com confirmação
function excluirProduto(index) {
    const produto = produtos[index];
    if (confirm(`Tem certeza que deseja excluir "${produto.nome}"?`)) {
        // Animação de saída antes de remover
        const row = document.querySelector(`tr[data-index="${index}"]`);
        row.classList.add("fade-out");
        
        setTimeout(() => {
            produtos.splice(index, 1);
            localStorage.setItem('produtos', JSON.stringify(produtos));
            atualizarTabela();
            mostrarMensagem(`Produto "${produto.nome}" removido com sucesso!`, "info");
        }, 300);
    }
}

// Pesquisa aprimorada (pesquisa em tempo real em múltiplos campos)
function filtrarProdutos() {
    let termo = document.getElementById("pesquisa").value.toLowerCase().trim();
    ultimaPesquisa = termo;
    
    if (!termo) {
        // Mostrar todos os produtos se a pesquisa estiver vazia
        let linhas = document.querySelectorAll("#tabela-produtos tr");
        linhas.forEach((linha, index) => {
            if (index === 0) return; // Pular cabeçalho
            linha.style.display = "";
        });
        return;
    }
    
    let linhas = document.querySelectorAll("#tabela-produtos tr");
    let encontrados = 0;
    
    linhas.forEach((linha, index) => {
        if (index === 0) return; // Pular cabeçalho
        
        // Pesquisar em vários campos
        const nome = linha.cells[0].innerText.toLowerCase();
        const tipo = linha.cells[1].innerText.toLowerCase();
        
        // Verificar se o termo aparece em qualquer campo
        if (nome.includes(termo) || tipo.includes(termo)) {
            linha.style.display = "";
            encontrados++;
            
            // Destaque dos termos encontrados (opcional)
            destacarTermo(linha.cells[0], termo);
            destacarTermo(linha.cells[1], termo);
        } else {
            linha.style.display = "none";
        }
    });
    
    // Feedback sobre resultados da pesquisa
    if (encontrados === 0 && produtos.length > 0) {
        mostrarMensagem(`Nenhum produto encontrado para "${termo}"`, "info");
    }
}

// Destacar termo pesquisado
function destacarTermo(cell, termo) {
    const texto = cell.innerText;
    const regex = new RegExp(`(${termo})`, 'gi');
    cell.innerHTML = texto.replace(regex, '<span class="destaque">$1</span>');
}

// Pesquisa avançada para venda
function filtrarProdutosVenda() {
    let termo = document.getElementById("buscarProduto").value.toLowerCase().trim();
    let resultadoBusca = produtos.filter(produto => 
        produto.nome.toLowerCase().includes(termo) || 
        produto.tipo.toLowerCase().includes(termo)
    );
    
    let tabelaProdutosVenda = document.getElementById("carrinho");
    
    // Verificar se o carrinho está sendo usado para sugestões ou mostrando o carrinho real
    if (carrinho.length === 0) {
        // Mostrar sugestões de produtos
        tabelaProdutosVenda.innerHTML = '';
        
        if (resultadoBusca.length === 0 && termo !== '') {
            tabelaProdutosVenda.innerHTML = '<p class="no-results">Nenhum produto encontrado</p>';
            return;
        }
        
        resultadoBusca.forEach((produto, index) => {
            if (produto.quantidade > 0) {
                const div = document.createElement('div');
                div.className = 'produto-sugestao';
                div.innerHTML = `
                    <span>${produto.nome} - R$ ${produto.venda.toFixed(2)} (${produto.quantidade} em estoque)</span>
                    <button onclick="selecionarProduto('${produto.nome}')" class="btn-adicionar">Selecionar</button>
                `;
                tabelaProdutosVenda.appendChild(div);
            }
        });
    }
}

// Selecionar produto para o carrinho
function selecionarProduto(nomeProduto) {
    document.getElementById("buscarProduto").value = nomeProduto;
    document.getElementById("carrinho").innerHTML = '';
}

// Adicionar ao carrinho com animação
function adicionarAoCarrinho() {
    let nomeProduto = document.getElementById("buscarProduto").value.trim();
    if (!nomeProduto) {
        mostrarMensagem("Digite o nome do produto", "erro");
        return;
    }
    
    let produto = produtos.find(p => p.nome.toLowerCase().includes(nomeProduto.toLowerCase()));
    
    if (!produto) {
        mostrarMensagem(`Produto "${nomeProduto}" não encontrado`, "erro");
        return;
    }
    
    if (produto.quantidade <= 0) {
        mostrarMensagem(`Produto "${produto.nome}" sem estoque`, "erro");
        return;
    }
    
    // Atualizar o estoque
    produto.quantidade--;
    
    // Verificar se o produto já está no carrinho
    const itemNoCarrinho = carrinho.findIndex(item => 
        item.produto.nome === produto.nome
    );
    
    if (itemNoCarrinho >= 0) {
        // Aumentar a quantidade se já estiver no carrinho
        carrinho[itemNoCarrinho].quantidade++;
    } else {
        // Adicionar novo item ao carrinho
        carrinho.push({
            produto: produto,
            quantidade: 1,
            subtotal: produto.venda
        });
    }
    
    total += produto.venda;
    localStorage.setItem('produtos', JSON.stringify(produtos));
    atualizarTabela();
    atualizarCarrinho();
    
    mostrarMensagem(`"${produto.nome}" adicionado ao carrinho`, "sucesso");
}

// Atualizar visualização do carrinho
function atualizarCarrinho() {
    const carrinhoElement = document.getElementById("carrinho");
    carrinhoElement.innerHTML = '';
    
    if (carrinho.length === 0) {
        carrinhoElement.innerHTML = '<p class="carrinho-vazio">Carrinho vazio</p>';
        document.getElementById("total").innerText = "0.00";
        return;
    }
    
    let totalCalculado = 0;
    
    carrinho.forEach((item, index) => {
        const subtotal = item.produto.venda * item.quantidade;
        totalCalculado += subtotal;
        
        const itemDiv = document.createElement('div');
        itemDiv.className = 'item-carrinho';
        itemDiv.innerHTML = `
            <span class="item-nome">${item.produto.nome}</span>
            <span class="item-quantidade">
                <button onclick="diminuirQuantidade(${index})" class="btn-quantidade">-</button>
                <span>${item.quantidade}x</span>
                <button onclick="aumentarQuantidade(${index})" class="btn-quantidade">+</button>
            </span>
            <span class="item-preco">R$ ${subtotal.toFixed(2)}</span>
            <button onclick="removerDoCarrinho(${index})" class="btn-remover">Remover</button>
        `;
        carrinhoElement.appendChild(itemDiv);
    });
    
    total = totalCalculado;
    document.getElementById("total").innerText = total.toFixed(2);
}

// Aumentar quantidade de um item no carrinho
function aumentarQuantidade(index) {
    const item = carrinho[index];
    
    // Verificar estoque
    const produtoAtual = produtos.find(p => p.nome === item.produto.nome);
    if (produtoAtual.quantidade <= 0) {
        mostrarMensagem(`Produto "${item.produto.nome}" sem mais estoque`, "erro");
        return;
    }
    
    // Atualizar estoque e carrinho
    produtoAtual.quantidade--;
    item.quantidade++;
    item.subtotal = item.produto.venda * item.quantidade;
    
    localStorage.setItem('produtos', JSON.stringify(produtos));
    atualizarTabela();
    atualizarCarrinho();
}

// Diminuir quantidade de um item no carrinho
function diminuirQuantidade(index) {
    const item = carrinho[index];
    
    if (item.quantidade <= 1) {
        // Se só tiver 1, remove o item
        removerDoCarrinho(index);
        return;
    }
    
    // Devolver ao estoque
    const produtoAtual = produtos.find(p => p.nome === item.produto.nome);
    produtoAtual.quantidade++;
    
    // Atualizar carrinho
    item.quantidade--;
    item.subtotal = item.produto.venda * item.quantidade;
    
    localStorage.setItem('produtos', JSON.stringify(produtos));
    atualizarTabela();
    atualizarCarrinho();
}

// Remover item do carrinho
function removerDoCarrinho(index) {
    const item = carrinho[index];
    
    // Devolver ao estoque
    const produtoAtual = produtos.find(p => p.nome === item.produto.nome);
    produtoAtual.quantidade += item.quantidade;
    
    // Remover do carrinho com animação
    const itemElement = document.querySelectorAll('.item-carrinho')[index];
    itemElement.classList.add('item-removido');
    
    setTimeout(() => {
        carrinho.splice(index, 1);
        localStorage.setItem('produtos', JSON.stringify(produtos));
        atualizarTabela();
        atualizarCarrinho();
    }, 300);
    
    mostrarMensagem(`"${item.produto.nome}" removido do carrinho`, "info");
}

// Limpar carrinho
function limparCarrinho() {
    if (carrinho.length === 0) return;
    
    if (confirm("Tem certeza que deseja limpar todo o carrinho?")) {
        // Devolver todos os itens ao estoque
        carrinho.forEach(item => {
            const produtoAtual = produtos.find(p => p.nome === item.produto.nome);
            produtoAtual.quantidade += item.quantidade;
        });
        
        carrinho = [];
        total = 0;
        
        localStorage.setItem('produtos', JSON.stringify(produtos));
        atualizarTabela();
        atualizarCarrinho();
        
        mostrarMensagem("Carrinho limpo com sucesso", "info");
    }
}

// Finalizar compra com melhorias
function finalizarCompra() {
    if (carrinho.length === 0) {
        mostrarMensagem("Adicione produtos ao carrinho primeiro", "erro");
        return;
    }
    
    // Obter dados anteriores
    let vendas = JSON.parse(localStorage.getItem('vendas')) || [];
    let totalLucro = parseFloat(document.getElementById("totalLucro").innerText) || 0;
    let totalProdutosVendidos = parseInt(document.getElementById("totalProdutosVendidos").innerText) || 0;
    
    let dataHora = new Date().toLocaleString();
    let lucroVendaAtual = 0;
    let itensVendidos = 0;
    
    // Criar venda para o histórico
    let venda = {
        id: Date.now(),
        data: dataHora,
        itens: [],
        total: total,
        lucro: 0
    };
    
    // Processar cada item do carrinho
    carrinho.forEach(item => {
        let lucroItem = (item.produto.venda - item.produto.custo) * item.quantidade;
        lucroVendaAtual += lucroItem;
        itensVendidos += item.quantidade;
        
        // Adicionar à venda atual
        venda.itens.push({
            nome: item.produto.nome,
            quantidade: item.quantidade,
            valorUnitario: item.produto.venda,
            valorTotal: item.produto.venda * item.quantidade
        });
        
        // Adicionar à tabela de vendas
        let vendasLista = document.getElementById("vendas-lista");
        let row = vendasLista.insertRow(0);
        row.classList.add('fade-in');
        
        row.insertCell(0).innerText = item.produto.nome;
        row.insertCell(1).innerText = item.quantidade;
        row.insertCell(2).innerText = "R$ " + (item.produto.venda * item.quantidade).toFixed(2);
        row.insertCell(3).innerText = dataHora;
    });
    
    // Atualizar lucro total
    venda.lucro = lucroVendaAtual;
    totalLucro += lucroVendaAtual;
    totalProdutosVendidos += itensVendidos;
    
    // Salvar venda no histórico
    vendas.push(venda);
    localStorage.setItem('vendas', JSON.stringify(vendas));
    
    // Atualizar UI
    document.getElementById("totalLucro").innerText = totalLucro.toFixed(2);
    document.getElementById("totalProdutosVendidos").innerText = totalProdutosVendidos;
    
    // Mostrar confirmação com animação melhorada
    let confirmacao = document.getElementById("confirmacao");
    confirmacao.innerHTML = `
        <div class="icon-success">✓</div>
        <div>
            <h3>Venda finalizada!</h3>
            <p>Total: R$ ${total.toFixed(2)}</p>
            <p>Itens: ${itensVendidos}</p>
        </div>
    `;
    
    confirmacao.classList.add("active");
    confirmacao.style.display = "flex";
    
    setTimeout(() => {
        confirmacao.classList.remove("active");
        confirmacao.style.display = "none";
    }, 3000);
    
    // Limpar o carrinho
    carrinho = [];
    total = 0;
    atualizarCarrinho();
}

// Carregar vendas salvas ao iniciar
function carregarVendasSalvas() {
    const vendas = JSON.parse(localStorage.getItem('vendas')) || [];
    let totalLucro = 0;
    let totalProdutosVendidos = 0;
    
    let vendasLista = document.getElementById("vendas-lista");
    vendasLista.innerHTML = '';
    
    vendas.forEach(venda => {
        totalLucro += venda.lucro;
        
        venda.itens.forEach(item => {
            totalProdutosVendidos += item.quantidade;
            
            let row = vendasLista.insertRow();
            row.insertCell(0).innerText = item.nome;
            row.insertCell(1).innerText = item.quantidade;
            row.insertCell(2).innerText = "R$ " + (item.valorTotal).toFixed(2);
            row.insertCell(3).innerText = venda.data;
        });
    });
    
    document.getElementById("totalLucro").innerText = totalLucro.toFixed(2);
    document.getElementById("totalProdutosVendidos").innerText = totalProdutosVendidos;
}

// Fechar caixa com relatório mais detalhado
function fecharCaixa() {
    let totalLucro = parseFloat(document.getElementById("totalLucro").innerText);
    let totalProdutosVendidos = parseInt(document.getElementById("totalProdutosVendidos").innerText);
    let vendas = JSON.parse(localStorage.getItem('vendas')) || [];
    
    // Contar vendas do dia
    const hoje = new Date().toLocaleDateString();
    let vendasHoje = vendas.filter(v => 
        new Date(v.data).toLocaleDateString() === hoje
    );
    
    let relatorio = `=== FECHAMENTO DE CAIXA ===\n`;
    relatorio += `Data: ${new Date().toLocaleDateString('pt-BR')}\n`;
    relatorio += `Hora: ${new Date().toLocaleTimeString('pt-BR')}\n\n`;
    relatorio += `Total de vendas hoje: ${vendasHoje.length}\n`;
    relatorio += `Produtos vendidos hoje: ${totalProdutosVendidos}\n`;
    relatorio += `Lucro total: R$ ${totalLucro.toFixed(2)}\n\n`;
    
    if (confirm(relatorio + "Deseja limpar os dados de vendas?")) {
        // Opção para limpar histórico de vendas
        localStorage.removeItem('vendas');
        document.getElementById("vendas-lista").innerHTML = '';
        document.getElementById("totalLucro").innerText = "0.00";
        document.getElementById("totalProdutosVendidos").innerText = "0";
        mostrarMensagem("Caixa fechado e histórico limpo", "sucesso");
    }
}

// Função para mostrar mensagens de feedback
function mostrarMensagem(texto, tipo = "info") {
    // Criar elemento de mensagem se não existir
    let mensagem = document.getElementById("mensagem-feedback");
    if (!mensagem) {
        mensagem = document.createElement("div");
        mensagem.id = "mensagem-feedback";
        document.body.appendChild(mensagem);
    }
    
    // Definir classes baseadas no tipo
    mensagem.className = `mensagem ${tipo}`;
    mensagem.innerHTML = texto;
    mensagem.style.display = "block";
    
    // Remover automaticamente após alguns segundos
    setTimeout(() => {
        mensagem.classList.add("mensagem-saindo");
        setTimeout(() => {
            mensagem.style.display = "none";
            mensagem.classList.remove("mensagem-saindo");
        }, 500);
    }, 3000);
}

// Função melhorada para fechar caixa com relatório detalhado e envio automático
function fecharCaixa() {
    // Obter dados de vendas e estoque
    let totalLucro = parseFloat(document.getElementById("totalLucro").innerText);
    let totalProdutosVendidos = parseInt(document.getElementById("totalProdutosVendidos").innerText);
    let vendas = JSON.parse(localStorage.getItem('vendas')) || [];
    let estoque = JSON.parse(localStorage.getItem('produtos')) || [];
    
    // Obter data e hora atual
    const dataAtual = new Date();
    const dataFormatada = dataAtual.toLocaleDateString('pt-BR');
    const horaFormatada = dataAtual.toLocaleTimeString('pt-BR');
    const timestamp = dataAtual.getTime();
    
    // Contar vendas do dia
    const hoje = dataAtual.toLocaleDateString();
    let vendasHoje = vendas.filter(v => 
        new Date(v.data).toLocaleDateString() === hoje
    );
    
    // Calcular estatísticas
    let totalVendidoHoje = 0;
    let totalLucroHoje = 0;
    let produtosMaisVendidos = {};
    
    vendasHoje.forEach(venda => {
        totalVendidoHoje += venda.total;
        totalLucroHoje += venda.lucro;
        
        venda.itens.forEach(item => {
            if (!produtosMaisVendidos[item.nome]) {
                produtosMaisVendidos[item.nome] = {
                    quantidade: 0,
                    valorTotal: 0
                };
            }
            produtosMaisVendidos[item.nome].quantidade += item.quantidade;
            produtosMaisVendidos[item.nome].valorTotal += item.valorTotal;
        });
    });
    
    // Converter para array e ordenar produtos mais vendidos
    let produtosArray = Object.keys(produtosMaisVendidos).map(nome => ({
        nome,
        quantidade: produtosMaisVendidos[nome].quantidade,
        valorTotal: produtosMaisVendidos[nome].valorTotal
    }));
    
    produtosArray.sort((a, b) => b.quantidade - a.quantidade);
    
    // Criar relatório em formato HTML para facilitar a leitura
    let relatorioHTML = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Relatório de Caixa - ${dataFormatada}</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h1, h2 { color: #333; }
            table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            tr:nth-child(even) { background-color: #f9f9f9; }
            .total { font-weight: bold; }
            .section { margin-bottom: 30px; }
        </style>
    </head>
    <body>
        <h1>Relatório de Fechamento de Caixa</h1>
        <p><strong>Data:</strong> ${dataFormatada}</p>
        <p><strong>Hora:</strong> ${horaFormatada}</p>
        
        <div class="section">
            <h2>Resumo de Vendas</h2>
            <table>
                <tr>
                    <th>Descrição</th>
                    <th>Valor</th>
                </tr>
                <tr>
                    <td>Total de vendas hoje</td>
                    <td>${vendasHoje.length}</td>
                </tr>
                <tr>
                    <td>Produtos vendidos hoje</td>
                    <td>${totalProdutosVendidos}</td>
                </tr>
                <tr>
                    <td>Valor total vendido hoje</td>
                    <td>R$ ${totalVendidoHoje.toFixed(2)}</td>
                </tr>
                <tr class="total">
                    <td>Lucro total</td>
                    <td>R$ ${totalLucroHoje.toFixed(2)}</td>
                </tr>
            </table>
        </div>
        
        <div class="section">
            <h2>Produtos Mais Vendidos</h2>
            <table>
                <tr>
                    <th>Produto</th>
                    <th>Quantidade</th>
                    <th>Valor Total</th>
                </tr>
                ${produtosArray.map(p => `
                <tr>
                    <td>${p.nome}</td>
                    <td>${p.quantidade}</td>
                    <td>R$ ${p.valorTotal.toFixed(2)}</td>
                </tr>
                `).join('')}
            </table>
        </div>
        
        <div class="section">
            <h2>Estoque Atual</h2>
            <table>
                <tr>
                    <th>Produto</th>
                    <th>Tipo</th>
                    <th>Quantidade</th>
                    <th>Preço Custo</th>
                    <th>Preço Venda</th>
                    <th>Valor em Estoque</th>
                </tr>
                ${estoque.map(p => `
                <tr>
                    <td>${p.nome}</td>
                    <td>${p.tipo}</td>
                    <td>${p.quantidade}</td>
                    <td>R$ ${p.custo.toFixed(2)}</td>
                    <td>R$ ${p.venda.toFixed(2)}</td>
                    <td>R$ ${(p.quantidade * p.venda).toFixed(2)}</td>
                </tr>
                `).join('')}
            </table>
        </div>
        
        <div class="section">
            <h2>Histórico de Vendas de Hoje</h2>
            <table>
                <tr>
                    <th>Hora</th>
                    <th>Produto</th>
                    <th>Quantidade</th>
                    <th>Valor</th>
                </tr>
                ${vendasHoje.flatMap(venda => 
                    venda.itens.map(item => `
                    <tr>
                        <td>${new Date(venda.data).toLocaleTimeString('pt-BR')}</td>
                        <td>${item.nome}</td>
                        <td>${item.quantidade}</td>
                        <td>R$ ${item.valorTotal.toFixed(2)}</td>
                    </tr>
                    `)
                ).join('')}
            </table>
        </div>
    </body>
    </html>`;
    
    // Versão simplificada para texto (para WhatsApp)
    let relatorioTexto = `*FECHAMENTO DE CAIXA - ${dataFormatada}*\n`;
    relatorioTexto += `*Hora:* ${horaFormatada}\n\n`;
    relatorioTexto += `*RESUMO:*\n`;
    relatorioTexto += `- Vendas hoje: ${vendasHoje.length}\n`;
    relatorioTexto += `- Produtos vendidos: ${totalProdutosVendidos}\n`;
    relatorioTexto += `- Total vendido: R$ ${totalVendidoHoje.toFixed(2)}\n`;
    relatorioTexto += `- Lucro total: R$ ${totalLucroHoje.toFixed(2)}\n\n`;
    relatorioTexto += `*TOP 5 PRODUTOS:*\n`;
    
    // Adicionar top 5 produtos
    produtosArray.slice(0, 5).forEach((p, index) => {
        relatorioTexto += `${index + 1}. ${p.nome}: ${p.quantidade} unid - R$ ${p.valorTotal.toFixed(2)}\n`;
    });
    
    // Salvar relatório em arquivo
    const blob = new Blob([relatorioHTML], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    
    // Criar elemento de link para download
    const a = document.createElement('a');
    a.href = url;
    a.download = `relatorio_caixa_${dataFormatada.replace(/\//g, '-')}_${timestamp}.html`;
    
    // Função para enviar por email usando EmailJS
    function enviarPorEmail() {
        // Verificar se EmailJS está carregado
        if (typeof emailjs !== 'undefined') {
            // Preparar dados para envio
            var templateParams = {
                to_email: 'mtz.martinss@gmail.com',
                subject: `Relatório de Caixa - ${dataFormatada}`,
                message: relatorioTexto,
                attachment: blob
            };
            
            // Enviar email
            emailjs.send('service_id', 'template_id', templateParams)
                .then(function(response) {
                    mostrarMensagem('Relatório enviado por email com sucesso!', 'sucesso');
                }, function(error) {
                    mostrarMensagem('Erro ao enviar email: ' + error, 'erro');
                    // Fallback: download do arquivo
                    a.click();
                });
        } else {
            // Fallback: download do arquivo se EmailJS não estiver disponível
            mostrarMensagem('EmailJS não disponível. Fazendo download do relatório...', 'info');
            a.click();
        }
    }
    
    // Função para enviar por WhatsApp
    function enviarPorWhatsApp() {
        // Codificar mensagem para URL
        const mensagemCodificada = encodeURIComponent(relatorioTexto);
        // Criar link do WhatsApp
        const whatsappURL = `https://wa.me/5511963822159?text=${mensagemCodificada}`;
        // Abrir WhatsApp em nova aba
        window.open(whatsappURL, '_blank');
    }
    
    // Mostrar opções de envio
    const confirmacao = confirm(
        `Relatório de caixa gerado com sucesso!\n\n` +
        `Resumo:\n` +
        `- Vendas hoje: ${vendasHoje.length}\n` +
        `- Lucro total: R$ ${totalLucroHoje.toFixed(2)}\n\n` +
        `Como deseja receber o relatório?`
    );
    
    if (confirmacao) {
        // Criar modal para opções de envio
        const modalDiv = document.createElement('div');
        modalDiv.className = 'modal-envio';
        modalDiv.innerHTML = `
            <div class="modal-conteudo">
                <h3>Enviar Relatório</h3>
                <p>Escolha como deseja receber o relatório:</p>
                <button id="btn-email" class="btn-modal">Enviar por Email</button>
                <button id="btn-whatsapp" class="btn-modal">Enviar por WhatsApp</button>
                <button id="btn-download" class="btn-modal">Apenas Download</button>
                <button id="btn-cancelar" class="btn-modal">Cancelar</button>
            </div>
        `;
        document.body.appendChild(modalDiv);
        
        // Adicionar CSS para o modal
        const style = document.createElement('style');
        style.textContent = `
            .modal-envio {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0,0,0,0.7);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 9999;
            }
            .modal-conteudo {
                background-color: white;
                padding: 30px;
                border-radius: 8px;
                max-width: 500px;
                width: 80%;
                text-align: center;
            }
            .btn-modal {
                display: block;
                width: 100%;
                padding: 12px;
                margin: 10px 0;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
            }
            #btn-email {
                background-color: #4285F4;
                color: white;
            }
            #btn-whatsapp {
                background-color: #25D366;
                color: white;
            }
            #btn-download {
                background-color: #FF5722;
                color: white;
            }
            #btn-cancelar {
                background-color: #ccc;
            }
        `;
        document.head.appendChild(style);
        
        // Adicionar event listeners
        document.getElementById('btn-email').addEventListener('click', function() {
            enviarPorEmail();
            document.body.removeChild(modalDiv);
        });
        
        document.getElementById('btn-whatsapp').addEventListener('click', function() {
            enviarPorWhatsApp();
            document.body.removeChild(modalDiv);
        });
        
        document.getElementById('btn-download').addEventListener('click', function() {
            a.click();
            document.body.removeChild(modalDiv);
        });
        
        document.getElementById('btn-cancelar').addEventListener('click', function() {
            document.body.removeChild(modalDiv);
        });
        
        // Adicionar script EmailJS
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';
        document.head.appendChild(script);
    } else {
        // Fazer download direto
        a.click();
    }
    
    // Limpar URL após download
    setTimeout(() => {
        URL.revokeObjectURL(url);
    }, 1000);
    
    // Perguntar se deseja limpar vendas
    if (confirm("Deseja limpar os dados de vendas de hoje?")) {
        // Filtrar apenas vendas que não são de hoje
        const vendasAnteriores = vendas.filter(v => 
            new Date(v.data).toLocaleDateString() !== hoje
        );
        
        localStorage.setItem('vendas', JSON.stringify(vendasAnteriores));
        document.getElementById("vendas-lista").innerHTML = '';
        document.getElementById("totalLucro").innerText = "0.00";
        document.getElementById("totalProdutosVendidos").innerText = "0";
        mostrarMensagem("Vendas de hoje foram limpas", "sucesso");
    }
    
    // Opção para implementação de banco de dados real
    // Aqui seria o ponto de integração com um serviço de banco de dados
    salvarRelatorioEmBancoDeDados(relatorioHTML, relatorioTexto, timestamp);
    
    return true;
}

// Função para salvar relatório em banco de dados (simulação)
function salvarRelatorioEmBancoDeDados(relatorioHTML, relatorioTexto, timestamp) {
    // Simular salvamento no banco de dados
    console.log("Salvando relatório no banco de dados...");
    
    // Aqui você implementaria a conexão com um banco de dados real
    // Por enquanto, vamos apenas salvar no localStorage como histórico
    
    let historicoRelatorios = JSON.parse(localStorage.getItem('historicoRelatorios')) || [];
    
    // Adicionar novo relatório ao histórico
    historicoRelatorios.push({
        id: timestamp,
        data: new Date().toLocaleDateString('pt-BR'),
        hora: new Date().toLocaleTimeString('pt-BR'),
        resumo: relatorioTexto.substring(0, 200) + "...", // Apenas um resumo
        tamanho: relatorioHTML.length
    });
    
    // Limitar número de registros salvos no histórico (opcional)
    if (historicoRelatorios.length > 50) {
        historicoRelatorios = historicoRelatorios.slice(-50);
    }
    
    // Salvar histórico atualizado
    localStorage.setItem('historicoRelatorios', JSON.stringify(historicoRelatorios));
    
    // Em uma implementação real, você enviaria os dados para:
    // 1. Um serviço de backend (API REST, por exemplo)
    // 2. Um banco de dados como Firebase, MongoDB, MySQL, etc.
    
    /* 
    Exemplo com Firebase (pseudocódigo):
    
    // Inicialize o Firebase em outro lugar do código
    firebase.firestore().collection('relatorios').add({
        data: new Date(),
        relatorioHTML: relatorioHTML,
        relatorioTexto: relatorioTexto,
        timestamp: timestamp
    })
    .then(docRef => {
        console.log("Relatório salvo com ID: ", docRef.id);
    })
    .catch(error => {
        console.error("Erro ao salvar relatório: ", error);
    });
    */
}

// Função para visualizar histórico de relatórios
function visualizarHistoricoRelatorios() {
    let historicoRelatorios = JSON.parse(localStorage.getItem('historicoRelatorios')) || [];
    
    if (historicoRelatorios.length === 0) {
        mostrarMensagem("Nenhum relatório encontrado no histórico", "info");
        return;
    }
    
    // Criar modal para visualizar histórico
    const modalDiv = document.createElement('div');
    modalDiv.className = 'modal-historico';
    
    let listaHTML = historicoRelatorios.map(relatorio => `
        <tr>
            <td>${relatorio.data}</td>
            <td>${relatorio.hora}</td>
            <td>${relatorio.resumo}</td>
            <td>
                <button class="btn-visualizar" data-id="${relatorio.id}">Visualizar</button>
            </td>
        </tr>
    `).join('');
    
    modalDiv.innerHTML = `
        <div class="modal-conteudo-historico">
            <h3>Histórico de Relatórios</h3>
            <table class="tabela-historico">
                <tr>
                    <th>Data</th>
                    <th>Hora</th>
                    <th>Resumo</th>
                    <th>Ação</th>
                </tr>
                ${listaHTML}
            </table>
            <button id="btn-fechar-historico" class="btn-modal">Fechar</button>
        </div>
    `;
    
    document.body.appendChild(modalDiv);
    
    // Adicionar CSS para o modal
    const style = document.createElement('style');
    style.textContent = `
        .modal-historico {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .modal-conteudo-historico {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            max-width: 800px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }
        .tabela-historico {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .tabela-historico th, .tabela-historico td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .tabela-historico th {
            background-color: #f2f2f2;
        }
        .btn-visualizar {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }
    `;
    
    document.head.appendChild(style);
    
    // Adicionar event listeners
    document.getElementById('btn-fechar-historico').addEventListener('click', function() {
        document.body.removeChild(modalDiv);
    });
    
    // Adicionar listeners para botões de visualizar
    const botoesVisualizar = document.querySelectorAll('.btn-visualizar');
    botoesVisualizar.forEach(botao => {
        botao.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            // Aqui você recuperaria o relatório completo do banco de dados
            mostrarMensagem("Funcionalidade em desenvolvimento. Em um sistema completo, o relatório seria carregado do banco de dados.", "info");
        });
    });
}

// Adicionar botão de histórico na interface
function adicionarBotaoHistorico() {
    const container = document.querySelector('.container');
    const botaoHistorico = document.createElement('button');
    botaoHistorico.innerText = 'Ver Histórico de Relatórios';
    botaoHistorico.className = 'btn-historico';
    botaoHistorico.addEventListener('click', visualizarHistoricoRelatorios);
    
    // Adicionar antes do botão de fechar caixa
    const botaoFecharCaixa = document.querySelector('a[href="Fechar_caixa.html"]').parentNode;
    container.insertBefore(botaoHistorico, botaoFecharCaixa);
    
    // Adicionar estilo para o botão
    const style = document.createElement('style');
    style.textContent = `
        .btn-historico {
            background-color: #673AB7;
            color: white;
            border: none;
            padding: 10px 15px;
            margin: 15px 0;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .btn-historico:hover {
            background-color: #5E35B1;
        }
    `;
    document.head.appendChild(style);
}

// Chamar função para adicionar botão ao carregar a página
document.addEventListener('DOMContentLoaded', function() {
    adicionarBotaoHistorico();
});
    </script>
    <script src="Script.js"></script>
    
</body>
</html>
